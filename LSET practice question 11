import java.io.*;
import java.util.*;

public class Main {
	static int S, E1, E2;
	static int ans1, ans2;

	void InputData() throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		String in[] = bf.readLine().split(" "); 
		S = Integer.parseInt(in[0]);
		E1 = Integer.parseInt(in[1]);
		E2 = Integer.parseInt(in[2]);
		bf.close();
	}
	
	void OutputData() throws IOException {
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(String.valueOf(ans1) + "\n");
		bw.write(String.valueOf(ans2) + "\n");
		bw.flush();
		bw.close();
	}
	
	
	static int getFactors(int n){
		int c = 0;
		for(int i=1; i<=Math.sqrt(n); i++){
			if(n%i == 0){
				if(i == n/i){
					c++;
				}
				else{
					c += 2;
				}
			}
		}
		return c;
	}
	
	static boolean canMove(int P1, int P2){
		int P1f = getFactors(P1);
		int P2f = getFactors(P2);
		if(Math.abs(P1f - P2f) > 1) return false;
		String P1s = String.valueOf(P1);
		String P2s = String.valueOf(P2);
		int c = 0;
		for(int i=0; i<4; i++){
			if(P1s.charAt(i) != P2s.charAt(i)) c++;
			if(c>1) return false;
		}
		
		return true;
	}
	
	static int bfs(int start, int end){
		Queue<int[]> q = new LinkedList<>();
		Set<Integer> vis = new HashSet<>();
		q.add(new int[]{start, 0});
		vis.add(start);
		
		while(!q.isEmpty()){
			int[] curr = q.poll();
			int currNum = curr[0];
			int moves = curr[1];
			if(currNum == end) return moves;
			for(int i=0; i<4; i++){
				char[] currStr = String.valueOf(currNum).toCharArray();
				for(char d = '0'; d<='9'; d++){
					char[] nextStr = currStr.clone();
					if(currStr[i]==d) continue;
					nextStr[i] = d;
					int nextNum = Integer.parseInt(new String(nextStr));
					if(nextNum >= 1000 && nextNum <= 9999 && !vis.contains(nextNum) && canMove(currNum, nextNum)){
						vis.add(nextNum);
						q.add(new int[]{nextNum, moves+1});
					}
				}
			}
		}
		return -1;
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();

		m.InputData();//입력 함수

		//코드를 작성하세요
		ans1 = bfs(S, E1);
		ans2 = bfs(S, E2);

		m.OutputData();//출력 함수
	}
}
