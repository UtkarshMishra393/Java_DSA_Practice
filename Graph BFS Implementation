Time Complexity of BFS in Graph:- O(V+E)

// // // Implementation for Single component graph;
import java.util.*;

public class GraphDSA {
    public static class Edge {
        int src;
        int dest;
        int wt;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 3));
        graph[1].add(new Edge(1, 0));

        graph[2].add(new Edge(2, 4));
        graph[2].add(new Edge(2, 0));

        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 5));

        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

    }

    static void bfs(ArrayList<Edge> graph[]) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] isVisited = new boolean[graph.length];
        q.add(0);

        while (!q.isEmpty()) {
            int node = q.peek();
            if (isVisited[node] == false) {
                System.out.print(node + " ");
                for (int i = 0; i < graph[node].size(); i++) {
                    Edge e = graph[node].get(i);
                    q.add(e.dest);
                }
                isVisited[node] = true;
            }
            q.remove();
        }
    }

    public static void main(String[] args) {
        int V = 7;

        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);
        bfs(graph);
    }
}



// // // Implementation for Multiple Component Graph
import java.util.*;

public class GraphDSA {
    public static class Edge {
        int src;
        int dest;
        int wt;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 3));
        graph[1].add(new Edge(1, 0));

        graph[2].add(new Edge(2, 4));
        graph[2].add(new Edge(2, 0));

        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 5));

        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

        graph[6].add(new Edge(6, 5));

    }

    static void bfs(ArrayList<Edge> graph[], boolean[] isVisited, int start) {
        Queue<Integer> q = new LinkedList<>();
        q.add(start);

        while (!q.isEmpty()) {
            int node = q.peek();
            if (isVisited[node] == false) {
                System.out.print(node + " ");
                for (int i = 0; i < graph[node].size(); i++) {
                    Edge e = graph[node].get(i);
                    q.add(e.dest);
                }
                isVisited[node] = true;
            }
            q.remove();
        }
    }

    public static void main(String[] args) {
        int V = 7;

        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);

        boolean[] isVisited = new boolean[V];
        for (int i = 0; i < V; i++) {
            if (isVisited[i] == false) {
                bfs(graph, isVisited, i);
            }
        }
    }
}
