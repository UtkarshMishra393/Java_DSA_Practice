class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int r = grid.length, c = grid[0].length;
        if(grid[0][0]==1 || grid[r-1][c-1]==1){
            return -1;
        }
        Queue<int[]> q = new LinkedList<>();
        int[] row = {-1, -1, 0, 1, 1, 1, 0, -1};
        int[] col = {0, 1, 1, 1, 0, -1, -1, -1};

        grid[0][0] = 1;       

        q.add(new int[]{0, 0, 1});

        while(!q.isEmpty()){
            int[] curr = q.poll();
            int x = curr[0], y = curr[1], moves = curr[2];
            if(x == r-1 && y == c-1){
                return moves;
            }
            for(int i=0; i<8; i++){
                int nx = x + row[i];
                int ny = y + col[i];
                if(nx >=0 && ny>=0 && nx<r && ny<c && grid[nx][ny]==0){
                    grid[nx][ny] = 1;
                    q.add(new int[]{nx, ny, moves+1});
                }
            }
        }
        return -1;
    }
}
