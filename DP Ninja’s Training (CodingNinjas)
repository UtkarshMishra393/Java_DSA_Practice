// Using Memoization
public class Solution {
    public static int solve(int[][] arr, int days, int prev, int[][] dp){
        if(days==0){
            int max = Integer.MIN_VALUE;
            for(int i=0; i<3; i++){
                if(i!=prev){
                    max = Math.max(arr[0][i], max);
                }
            }
            return max;
        }

        if(dp[days][prev] != -1){
            return dp[days][prev];
        }

        int max = Integer.MIN_VALUE;
        for(int i=0; i<3; i++){
            if(i!=prev){
                int points = solve(arr, days-1, i, dp) + arr[days][i];
                max = Math.max(max, points);
            }
        }
        return dp[days][prev] = max;
    }
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];
        for(int i=0; i<n; i++){
            for(int j=0; j<4; j++){
                dp[i][j] = -1;
            }
        }
        return solve(points, n-1, 3, dp);
    }
}




// Using Tabulation (Reducing Space Complexity by removing Recusrsion stack)
public class Solution {
    public static int ninjaTraining(int n, int arr[][]) {
        int[][] dp = new int[n][4];
        dp[0][0] = Math.max(arr[0][1], arr[0][2]);
        dp[0][1] = Math.max(arr[0][0], arr[0][2]);
        dp[0][2] = Math.max(arr[0][0], arr[0][1]);
        dp[0][3] = Math.max(arr[0][1], Math.max(arr[0][1], arr[0][2]));


        for(int days=1; days<n; days++){
            for(int prev=0; prev<4; prev++){
                dp[days][prev] = 0;
                for(int k=0; k<3; k++){
                    if(k!=prev){
                        int point = dp[days-1][k] + arr[days][k];
                        dp[days][prev] = Math.max(dp[days][prev], point);
                    }
                }
            }
        }

        return dp[n-1][3];
    }
}

// Using Tabulation (Space Optimization:- SC = O(4))
public class Solution {
    public static int ninjaTraining(int n, int arr[][]) {
        int[] lastDay_dp = new int[4];
        lastDay_dp[0] = Math.max(arr[0][1], arr[0][2]);
        lastDay_dp[1] = Math.max(arr[0][0], arr[0][2]);
        lastDay_dp[2] = Math.max(arr[0][0], arr[0][1]);
        lastDay_dp[3] = Math.max(arr[0][1], Math.max(arr[0][1], arr[0][2]));


        for(int days=1; days<n; days++){
            int[] currDay = new int[4];
            for(int prev=0; prev<4; prev++){
                currDay[prev] = 0;
                for(int k=0; k<3; k++){
                    if(k!=prev){
                        currDay[prev] = Math.max(currDay[prev], lastDay_dp[k] + arr[days][k]);
                    }
                }
            }
            lastDay_dp = currDay;
        }

        return lastDay_dp[3];
    }
}
