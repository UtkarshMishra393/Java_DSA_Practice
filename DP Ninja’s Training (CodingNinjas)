// Using Memoization

public class Solution {
    public static int solve(int[][] arr, int days, int prev, int[][] dp){
        if(days==0){
            int max = Integer.MIN_VALUE;
            for(int i=0; i<3; i++){
                if(i!=prev){
                    max = Math.max(arr[0][i], max);
                }
            }
            return max;
        }

        if(dp[days][prev] != -1){
            return dp[days][prev];
        }

        int max = Integer.MIN_VALUE;
        for(int i=0; i<3; i++){
            if(i!=prev){
                int points = solve(arr, days-1, i, dp) + arr[days][i];
                max = Math.max(max, points);
            }
        }
        return dp[days][prev] = max;
    }
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][4];
        for(int i=0; i<n; i++){
            for(int j=0; j<4; j++){
                dp[i][j] = -1;
            }
        }
        return solve(points, n-1, 3, dp);
    }
}
