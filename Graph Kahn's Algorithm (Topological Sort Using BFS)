class Solution {
    static ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> arr, int[] inDegrees){
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<inDegrees.length; i++){
            if(inDegrees[i]==0) q.add(i);
        }
        while(!q.isEmpty()){
            int  curr = q.poll();
            arr.add(curr);
            for(int i=0; i<adj.get(curr).size(); i++){
                int node = adj.get(curr).get(i);
                inDegrees[node]--;
                if(inDegrees[node]==0){
                    q.add(node);
                }
            }
        }
        return arr;
    }
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        ArrayList<Integer> arr = new ArrayList<>();
        int[] inDegrees = new int[adj.size()];
        for(int i=0; i<adj.size(); i++){
            for(int j=0; j<adj.get(i).size(); j++){
                inDegrees[adj.get(i).get(j)]++;
            }
        }
        bfs(adj, arr, inDegrees);
        return arr;
    }
}
