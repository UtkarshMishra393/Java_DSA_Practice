class Solution {
    static Boolean solve(int[] nums, int idx, int k, int[][] dp){
        if(k == 0){
            return true;
        }
        if(idx == 0) return nums[0] == k;
        
        if(dp[idx][k] != -1){
            return dp[idx][k]==1?true:false;
        }

        boolean notTake = solve(nums, idx-1, k, dp);
        
        boolean take = false;
        if(nums[idx] <= k){
            take = solve(nums, idx-1, k - nums[idx], dp);
        }
        
        dp[idx][k] = (take || notTake)? 1:0;
        return take || notTake;
    }

    static Boolean isSubsetSum(int arr[], int target) {
        int dp[][] = new int[arr.length][target+1];
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<target+1;j++){
                dp[i][j] = -1;
            }
        }
        return solve(arr, arr.length-1, target, dp);
    }
}
