class Solution {
    public class Pair{
    int node;
    int wt;
    Pair(int a, int b){
        this.node = a;
        this.wt = b;
    }
}

    public List<Integer> shortestPath(int n, int m, int edges[][]) {
        ArrayList<Pair>[] adj = new ArrayList[n+1];
        
        for(int i=0; i<=n; i++){
            adj[i] = new ArrayList<Pair>();
        }
        
        for(int i=0; i<m; i++){
            adj[edges[i][0]].add(new Pair(edges[i][1], edges[i][2]));
            adj[edges[i][1]].add(new Pair(edges[i][0], edges[i][2]));
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        PriorityQueue<Pair> q = new PriorityQueue<>((x,y) -> x.wt - y.wt);
        q.add(new Pair(1, 0));
        int[] dist = new int[n+1];
        for(int i=2; i<=n; i++){
            dist[i] = Integer.MAX_VALUE;
        }
        
        int[] par = new int[n+1];
        
        boolean flag = false;
        while(!q.isEmpty()){
            Pair p = q.poll();
            int curr = p.node;
            int dis = p.wt;
            
            if(curr==n){
                int i = n;
                while(i!=0){
                    ans.add(i);
                    i = par[i];
                }
                ans.add(dis);
                Collections.reverse(ans);
                flag = true;
                break;
            }
            for(int i=0; i<adj[curr].size(); i++){
                int node = adj[curr].get(i).node;
                int wt = adj[curr].get(i).wt;
                if(node!=par[curr] && (dist[node] > dis + wt)){
                    dist[node] = dis + wt;
                    par[node] = curr;
                    q.add(new Pair(node, dist[node]));
                }
            }   
        }
        
        if(!flag){
            return new ArrayList<Integer>(List.of(-1));
        }
        System.out.println(ans);
        return ans;
    }
}
