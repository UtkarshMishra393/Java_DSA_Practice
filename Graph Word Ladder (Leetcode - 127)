class Solution {
    public class Pair{
        String str;
        int move;
        Pair(String str, int move){
            this.str = str;
            this.move = move;
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        for(int i=0; i<wordList.size(); i++){
            set.add(wordList.get(i));
        }

        q.add(new Pair(beginWord, 1));

        while(!q.isEmpty()){
            Pair p = q.poll();
            String str = p.str;
            int moves = p.move;
            if(str.equals(endWord)){
                return moves;
            }

            for(int i=0; i<str.length(); i++){
                for(char j='a'; j<='z'; j++){
                    if(j == str.charAt(i)) continue;
                    char[] nextStr = str.toCharArray();
                    nextStr[i] = j;
                    String next = String.valueOf(nextStr);
                    if(set.contains(next)){
                        q.add(new Pair(next, moves+1));
                        set.remove(next);
                    } 
                }
            }
        }

        return 0;
    }
}
