import java.util.*;
import java.io.*;

public class Solution {
    public static int solve(int[] nums, int idx, int k, int[][] dp){
        if(idx==0 && nums[0]==k) return 1;
        else if(idx<=0) return 0;
        
        if(dp[idx][k] != -1){
            return dp[idx][k];
        }

        int notTake = solve(nums, idx-1, k, dp);
        
        int take = 0;
        int val = 0;
        if(nums[idx] <= k){
            take = solve(nums, idx-1, k - nums[idx], dp);
            if(k-nums[idx]==0) val++;
            take += val;
        }

        int mod = (int)(1e9 + 7);
        
        return dp[idx][k] = (take+notTake)%mod;
    }
    public static int findWays(int arr[], int target) {
        int dp[][] = new int[arr.length][target+1];
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<target+1;j++){
                dp[i][j] = -1;
            }
        }
        return solve(arr, arr.length-1, target, dp);
    }
}
