// This solution will give TLE for some testcases on Leetcode but Better for Interview
class Solution {
    public class Pair{
        String str;
        ArrayList<String> arr;
        Pair(String str, ArrayList<String> arr){
            this.str = str;
            this.arr = arr;
        }
    }
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Queue<ArrayList<String>> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        for(int i=0; i<wordList.size(); i++){
            set.add(wordList.get(i));
        }

        List<List<String>> ans = new ArrayList<>();
        
        q.add(new ArrayList<String>(List.of(beginWord)));
        int level = 0;

        Set<String> tempSet = new HashSet<>();
        while(!q.isEmpty()){
            ArrayList<String> arr = q.poll();
            String str = arr.get(arr.size()-1);
            if(arr.size()>level){
                level = arr.size();
                for(String k: tempSet){
                       set.remove(k); 
                }
                tempSet.clear();
            }
            if(str.equals(endWord)){
                ans.add(arr);
            }
            for(int i=0; i<str.length(); i++){
                for(char j='a'; j<='z'; j++){
                    if(j == str.charAt(i)) continue;
                    char[] nextStr = str.toCharArray();
                    nextStr[i] = j;
                    String next = String.valueOf(nextStr);
                    if(set.contains(next)){
                        arr.add(next);
                        System.out.println(arr);
                        q.add(new ArrayList<String>(arr));
                        arr.remove(arr.size()-1);
                        tempSet.add(next);
                    }
                }
            }
        }
        return ans;
    }
}




// Optimized Solution (This Solution will Fully Pass all the Test Cases, using Backtracking - CP Soltuion)
class Solution {
    public class Pair{
        String str;
        int move;
        Pair(String str, int move){
            this.str = str;
            this.move = move;
        }
    }

    public void dfs(List<List<String>> ans, Map<String, Integer> map, String start, String end, ArrayList<String> arr){
        if(end.equals(start)){
            ArrayList<String> temp = new ArrayList<>(arr);
            Collections.reverse(temp);
            ans.add(temp);
            return;
        }
        for(int i=0; i<end.length(); i++){
            for(char j='a'; j<='z'; j++){
                if(j == end.charAt(i)) continue;
                char[] nextStr = end.toCharArray();
                nextStr[i] = j;
                String next = String.valueOf(nextStr);
                if(map.containsKey(next) && map.get(next) == map.get(end)-1){
                    arr.add(next);
                    dfs(ans, map, start, next, arr);
                    arr.remove(arr.size()-1);
                } 
            }
        }
    }

    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        for(int i=0; i<wordList.size(); i++){
            set.add(wordList.get(i));
        }

        q.add(new Pair(beginWord, 0));
        List<List<String>> ans = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();

        while(!q.isEmpty()){
            Pair p = q.poll();
            String str = p.str;
            int moves = p.move;
            if(map.containsKey(str)){
                continue;
            }
            map.put(str, moves);
            for(int i=0; i<str.length(); i++){
                for(char j='a'; j<='z'; j++){
                    if(j == str.charAt(i)) continue;
                    char[] nextStr = str.toCharArray();
                    nextStr[i] = j;
                    String next = String.valueOf(nextStr);
                    if(set.contains(next)){
                        q.add(new Pair(next, moves+1));
                    } 
                }
            }
        }
        System.out.println(map);
        if(!map.containsKey(endWord)){
            return ans;
        }
        ArrayList<String> arr = new ArrayList<>();
        arr.add(endWord);
        dfs(ans, map, beginWord, endWord, arr);
        return ans;
    }
}
