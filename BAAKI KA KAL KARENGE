import java.util.*;

public class GraphDSA {
    public static class Edge {
        int src;
        int dest;
        int wt;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        graph[2].add(new Edge(2, 3));

        graph[3].add(new Edge(3, 1));

        graph[4].add(new Edge(4, 0));
        graph[4].add(new Edge(4, 1));

        graph[5].add(new Edge(5, 0));
        graph[5].add(new Edge(5, 2));

    }

    public static void dfs(ArrayList<Edge> graph[], boolean[] isVisited, int node) {
        System.out.print(node + " ");
        isVisited[node] = true;
        for (int i = 0; i < graph[node].size(); i++) {
            Edge e = graph[node].get(i);
            if (isVisited[e.dest] == false)
                dfs(graph, isVisited, e.dest);
        }
    }

    static void bfs(ArrayList<Edge> graph[], boolean[] isVisited, int start) {
        Queue<Integer> q = new LinkedList<>();
        q.add(start);

        while (!q.isEmpty()) {
            int node = q.peek();
            if (isVisited[node] == false) {
                System.out.print(node + " ");
                for (int i = 0; i < graph[node].size(); i++) {
                    Edge e = graph[node].get(i);
                    q.add(e.dest);
                }
                isVisited[node] = true;
            }
            q.remove();
        }
    }

    static void printAllPath(ArrayList<Edge> graph[], boolean[] isVisited, int node, String path, int tar) {
        if (node == tar) {
            System.out.println(path);
            return;
        }

        for (int i = 0; i < graph[node].size(); i++) {
            Edge e = graph[node].get(i);
            if (isVisited[e.dest] == false) {
                isVisited[node] = true;
                printAllPath(graph, isVisited, e.dest, path + e.dest, tar);
                isVisited[node] = false;
            }
        }
    }

    static boolean cycleDetection(ArrayList<Edge> graph[], boolean[] vis, int curr, boolean[] rec_stack) {
        vis[curr] = true;
        rec_stack[curr] = true;

        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (rec_stack[e.dest] == true) {
                return true;
            } else if (vis[e.dest] == false) {
                if (cycleDetection(graph, vis, e.dest, rec_stack)) {
                    return true;
                }
            }
        }
        rec_stack[curr] = false;
        return false;
    }

    static void topologicalSort(ArrayList<Edge> graph[], boolean[] vis, int curr, Stack<Integer> st) {
        vis[curr] = true;
        st.push(curr);
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (vis[e.dest] == false) {
                topologicalSort(graph, vis, e.dest, st);
            }
        }
    }

    public static void main(String[] args) {
        int V = 6;

        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);

        // boolean[] isVisited = new boolean[V];
        // for (int i = 0; i < V; i++) {
        // if (isVisited[i] == false) {
        // dfs(graph, isVisited, i);
        // }
        // }

        // boolean[] isVisited = new boolean[V];
        // boolean[] rec_stack = new boolean[V];
        // boolean ans = false;
        // for (int i = 0; i < V; i++) {
        // if (isVisited[i] == false) {
        // ans = cycleDetection(graph, isVisited, i, rec_stack);
        // if (ans) {
        // break;
        // }
        // }
        // }
        // System.out.println(ans);

        // boolean[] isVisited = new boolean[V];
        // int src = 0, tar = 5;
        // printAllPath(graph, isVisited, src, "0", tar);

        boolean[] isVisited = new boolean[V];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < V; i++) {
            if (isVisited[i] == false) {
                topologicalSort(graph, isVisited, i, st);
            }
        }
        while (!st.isEmpty()) {
            System.out.print(st.pop() + " ");
        }
    }
}
