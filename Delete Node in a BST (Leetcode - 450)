class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root!=null && root.val==key){
            TreeNode temp = new TreeNode(Integer.MAX_VALUE);
            temp.left = root;
            delete(temp, key);
            return temp.left;
        }
        delete(root, key);
        return root;
    }

    public void delete(TreeNode root, int key){
        if(root == null) return;
        if(root.val>key){
            if(root.left==null) return;
            if(root.left.val==key){
                TreeNode l = root.left;
                if(l.left==null && l.right==null) root.left = null;
                else if(l.left==null || l.right==null){
                    if(l.left==null) root.left = l.right;
                    else root.left = l.left;
                }
                else{
                    TreeNode pred = l.left;
                    while(pred.right!=null){
                        pred = pred.right;
                    }
                    delete(root, pred.val);
                    pred.left = l.left;
                    pred.right = l.right;
                    root.left = pred; 
                }
            }
            else delete(root.left, key);
        }
        else{
            if(root.right==null) return;
            if(root.right.val==key){
                TreeNode r = root.right;
                if(r.left==null && r.right==null) root.right = null;
                else if(r.left==null || r.right==null){
                    if(r.left==null) root.right = r.right;
                    else root.right = r.left;
                }
                else{
                    TreeNode pred = r.left;
                    while(pred.right!=null){
                        pred = pred.right;
                    }
                    delete(root, pred.val); 
                    pred.left = r.left;
                    pred.right = r.right;
                    root.right = pred;
                }
            }
            else delete(root.right, key);
        }
    }
}
