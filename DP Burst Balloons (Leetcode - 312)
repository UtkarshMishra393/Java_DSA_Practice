class Solution {
    public int solve(int[] arr, int i, int j,int[][] dp){
        if(i>j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int max = Integer.MIN_VALUE;

        // as the example explanation given on leetcode, we are doing reverse of that, i.e, from the single number to the whole array.
        for(int k=i; k<=j; k++){
            int coins = arr[i-1]*arr[k]*arr[j+1] + solve(arr, i, k-1, dp) + solve(arr, k+1, j, dp); 
            max = Math.max(max, coins);
        }
        return dp[i][j] = max;
    }
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[] arr = new int[n+2];
        arr[0] = 1;
        int k = 1;
        for(int i=0; i<n; i++){
            arr[k++] = nums[i];
        }
        arr[n+1] = 1;
        int[][] dp = new int[n+1][n+1];
        for(int i=0; i<=n; i++){
            for(int j=0; j<=n; j++){
                dp[i][j] = -1;
            }
        }
        return solve(arr, 1, n, dp);
    }
}
