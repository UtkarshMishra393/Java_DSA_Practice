//*******************CUSTOM HASHMAP IMPLEMENTATION*******************//
import java.util.*;

public class Main {
    static class MyHashMap<K, V>{
      public static final int DEFAULT_CAPACITY =4;
      public static final float DEFAULT_LOAD_FACTOR = 0.75f;
      private class Node{
        K key;
        V value;
        Node(K key, V value){
          this.key = key;
          this.value = value;
        }
      }
      
      private int n; // number of entris in map
      private LinkedList<Node>[] buckets;
      
      private void initBuckets(int N){ // N - capacity/size of buckets array
        buckets = new LinkedList[N];
        for(int i=0;i<buckets.length; i++){
          buckets[i] = new LinkedList<>();
        }
      }
      
      private int HashFunction(K key){ // return bucket index for key
        int hc = key.hashCode(); // hashcode function returns hashcode for any value of any data type.
        return (Math.abs(hc))%buckets.length;
      }
      
      // Traversesthe ll and looks for a node with key,if found it returns it's index otherwise it returns null
      private int searchInBucket(LinkedList<Node> ll, K key){
         for(int i=0; i<ll.size(); i++){
           if(ll.get(i).key == key){
             return i;
           }
         }
         return -1;
      }
      
      public MyHashMap(){
        initBuckets(DEFAULT_CAPACITY);
      }
      
      private void rehash(){
        LinkedList<Node>[] oldBuckets = buckets;
        n = 0;
        initBuckets(oldBuckets.length * 2);
        for(var bucket: oldBuckets){
          for(var node: bucket){
            put(node.key, node.value);
          }
        }
      }
      
      public int size(){// return the number of entries in map
        return n;
      }
      
      public void put(K key, V value){ // insert/update
        int bi = HashFunction(key);
        LinkedList<Node> currBucket = buckets[bi];
        int ei = searchInBucket(currBucket, key);
        if(ei == -1) { // key doesn't exist, we have to insert a new node
          Node node = new Node(key, value);
           currBucket.add(node);
           n++;
        } else{ // update case
          Node currNode = currBucket.get(ei);
          currNode.value = value;
        }
        
        if(n >= buckets.length  * DEFAULT_LOAD_FACTOR){
          rehash();
        }
      }
      
      public V get(K key){
        int bi = HashFunction(key);
        LinkedList<Node> currBucket = buckets[bi];
        int ei = searchInBucket(currBucket, key);
        if(ei != -1){
          Node currNode = currBucket.get(ei);
          return currNode.value;
        }
        return null;
      }
      
      public V remove(K key){
        int bi = HashFunction(key);
        LinkedList<Node> currBucket = buckets[bi];
        int ei = searchInBucket(currBucket, key);
        if(ei != 1){
          Node currNode = currBucket.get(ei);
          V val = currNode.value;
          currBucket.remove(ei);
          n--;
          return val;
        }
        return null;
      }
    }
    
    public static void main(String[] args) {
      MyHashMap<String, Integer> mp = new MyHashMap<>();
      System.out.println("Testing put");
      mp.put("a", 1);
      mp.put("b", 2);
      mp.put("c", 3);
      mp.put("d", 4);
      mp.put("e", 5);
      System.out.println(mp.size());
      mp.put("d", 70);
      System.out.println(mp.size());
      
      System.out.println("Testing Get");
      System.out.println(mp.get("a"));
      System.out.println(mp.get("b"));
      System.out.println(mp.get("c"));
      System.out.println(mp.get("d"));
      System.out.println(mp.get("e"));
      
      
      System.out.println("Testing Remove");
      System.out.println(mp.remove("d"));
      System.out.println(mp.size());
  }
}
