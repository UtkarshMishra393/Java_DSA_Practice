1. Iterative Method (DFS):

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(st.size()>0){
            TreeNode temp = st.peek();
            if(temp.left!=null){
                st.push(st.peek().left);
                temp.left = null;
            }
            else{
                st.pop();
                list.add(temp.val);
                if(temp.right!=null) st.push(temp.right);
            }
        }
        return list;
    }
}



2. Recursive Method:

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list);
        return list;
    }

    public void helper(TreeNode root, List<Integer> list){
        if(root==null){
            return;
        }
        helper(root.left, list);
        list.add(root.val);
        helper(root.right, list);
    }
}



3. Morris Traversal
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> arr = new ArrayList<>();
        if(root==null){
            return arr;
        }
        TreeNode curr = root;
        TreeNode pred = null;
        while(curr!=null){
            if(curr.left!=null){
                pred = curr.left;
                while(pred.right!=null && pred.right!=curr) pred = pred.right;
                if(pred.right==curr){
                    arr.add(curr.val);
                    pred.right = null;
                    curr = curr.right;
                }
                else{
                    pred.right = curr;
                    curr = curr.left;
                }
            }
            else{
                arr.add(curr.val);
                curr = curr.right;
            }
        }
        return arr;      
    }
}
