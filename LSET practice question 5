import java.io.*;
import java.util.*;
public class Main {
	static int N;
	static char map[][];

	static char ans; //구매자 이름 Buyer's name
	static int areacnt; //구매자 영역 개수 Number of buyer's area

	void InputData() throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(bf.readLine());
		map = new char[N][N];
		for (int i = 0; i < N; i++) {
			map[i] = bf.readLine().toCharArray();
		}
		bf.close();
	}
	
	public static class Pair{
		int x;
		int y;
		Pair(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
	
	static int[][] owners = new int[3][2];
	
	static void bfs(boolean[][] vis, int i, int j){
		
		int[] row = {-1, 0, 1, 0};
		int[] col = {0, 1, 0, -1};
		
		Queue<Pair> q = new LinkedList<>();
		q.add(new Pair(i, j));
		vis[i][j] = true;
		char check = map[i][j];
		int grids = 1;
		
		while(!q.isEmpty()){
			Pair curr = q.poll();
			int x = curr.x;
			int y = curr.y;
			for(int k=0; k<4; k++){
				int nx = x + row[k];
				int ny = y + col[k];
				if(nx >= 0 && ny >= 0 && nx < N && ny < N && !vis[nx][ny] && map[nx][ny]==check){
					vis[nx][ny] = true;
					q.add(new Pair(nx, ny));
					grids++;
				}
			}
		}
		
		if(check=='R'){
			owners[0][0]++;
			owners[0][1] += grids;
		} else if(check == 'G'){
			owners[1][0]++;
			owners[1][1] += grids;
		} else{
			owners[2][0]++;
			owners[2][1] += grids;
		}	
	}
	
	

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.InputData(); //입력 Input

		//여기서부터 작성 Write from here
		boolean[][] vis = new boolean[N][N];
		for(int i=0; i<N; i++){
			for(int j=0; j<N; j++){
				if(vis[i][j] != true){
					bfs(vis, i, j);
				}
			}
		}
		
		int maxZones = 0, maxGrids = 0;
		for(int i=0; i<3; i++){
			if((owners[i][0] > maxZones) || (owners[i][0] == maxZones && owners[i][1] > maxGrids) || (owners[i][0] == maxZones && owners[i][1] > maxGrids && i < (ans == 'R'? 0: ans == 'G'? 1: 2)) ){
				maxZones = owners[i][0];
				maxGrids = owners[i][1];
				ans = (i==0? 'R': i==1? 'G':'B');
			}
		}
		
		areacnt = maxZones;

		//출력 Output
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(String.valueOf(m.ans) + " " + String.valueOf(m.areacnt) + "\n");
		bw.flush();
		bw.close();
	}
}
