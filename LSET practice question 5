import java.io.*;
import java.util.*;
public class Main {
	static int N;
	char map[][];

	static char ans; //구매자 이름 Buyer's name
	static int areacnt; //구매자 영역 개수 Number of buyer's area

	void InputData() throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(bf.readLine());
		map = new char[N][N];
		for (int i = 0; i < N; i++) {
			map[i] = bf.readLine().toCharArray();
		}
		bf.close();
	}
	
static int Rz = 0;
static int Gz = 0;
static int Bz = 0;
static int Rgrid = 0;
static int Ggrid = 0;
static int Bgrid = 0;
	
	public class Pair{
		int r;
		int c;
	}
	
	void Solve_BFS(int[][] isVisited, int r, int c){
		
		Queue<Pair> q = new LinkedList<>();
		
		Pair p = new Pair();
		p.r = r;
		p.c = c;
		q.add(p);
		
		isVisited[r][c] = 1;
		
		int[] row = {-1, 0, 1, 0};
		int[] col = {0, 1, 0, -1};
		
		char x = map[r][c];
		int grids = 0;
		
		while(!q.isEmpty()){
			int a = q.peek().r;
			int b = q.peek().c;
			
			q.remove();
			
			for(int i=0; i<4; i++){
				if(a+row[i] < 0 || a+row[i] >= N || b+col[i] < 0 || b+col[i] >= N || (isVisited[a + row[i]][b + col[i]] == 1) || (map[a + row[i]][b + col[i]] != map[a][b])){
					continue;
				}
				
				isVisited[a + row[i]][b + col[i]] = 1;
				grids++;
				p.r = a + row[i];
				p.c = b + col[i];
				q.add(p);
			}
		}
		
		if(x == 'R'){
			Rgrid += grids;
			Rz++;
		}
		else if(x== 'G'){
			Ggrid += grids;
			Gz++;
		}
		else{
			Bgrid += grids;
			Bz++;
		}
	}

	public static void main(String[] args) throws IOException {
		Main m = new Main();
		m.InputData(); //입력 Input
		
		int[][] isVisited = new int[N][N];
		
		for(int i=0; i<N; i++){
			for(int j=0; j<N; j++){
				if(isVisited[i][j] != 1){
					m.Solve_BFS(isVisited, i, j);
				}
			}
		}
		
		int maxZones = Math.max(Rz, Math.max(Gz, Bz));

        // Check owners with the max zones
        if (Rz == maxZones) {
            ans = 'R';
            areacnt = Rz;
        }
        if (Gz == maxZones) {
            if (ans == ' ' || Ggrid > Rgrid || (Ggrid == Rgrid && ans != 'R')) {
                ans = 'G';
                areacnt = Gz;
            }
        }
        if (Bz == maxZones) {
            if (ans == ' ' || Bgrid > Rgrid || (Bgrid == Rgrid && ans == 'G')) {
                ans = 'B';
                areacnt = Bz;
            }
        }
		
		//출력 Output
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		bw.write(String.valueOf(m.ans) + " " + String.valueOf(m.areacnt) + "\n");
		bw.flush();
		bw.close();
	}
}
