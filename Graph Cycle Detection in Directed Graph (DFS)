class Solution {
    static boolean dfs(ArrayList<ArrayList<Integer>> graph, int curr, boolean[] vis, boolean[] pathVis){
        vis[curr] = true;
        pathVis[curr] = true;
        for(int i=0; i<graph.get(curr).size(); i++){
            int node = graph.get(curr).get(i);
            if(vis[node]==false){
                if(dfs(graph, node, vis, pathVis)){
                    return true;
                }
            }else if(pathVis[node]){
                return true;
            }
        }
        pathVis[curr] = false;
        return false;
    }
    
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V];
        boolean[] pathVis = new boolean[V];
        for(int i=0; i<adj.size(); i++){
            if(!vis[i]){
                if(dfs(adj, i, vis, pathVis)){
                    return true;
                }
            }
        }
        return false;
    }
}
