import java.util.*;

public class GraphDSA {
    public static class Edge {
        int src;
        int dest;
        int wt;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1));

        graph[2].add(new Edge(2, 1));
        graph[2].add(new Edge(2, 3));

        graph[3].add(new Edge(3, 4));

        graph[4].add(new Edge(4, 2));

    }

    static boolean cycleDetection(ArrayList<Edge> graph[], boolean[] vis, int curr, boolean[] rec_stack) {
        vis[curr] = true;
        rec_stack[curr] = true;

        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (rec_stack[e.dest] == true) {
                return true;
            } else if (vis[e.dest] == false) {
                if (cycleDetection(graph, vis, e.dest, rec_stack)) {
                    return true;
                }
            }
        }
        rec_stack[curr] = false;
        return false;
    }

    public static void main(String[] args) {
        int V = 5;

        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);

        boolean[] isVisited = new boolean[V];
        boolean[] rec_stack = new boolean[V];

        boolean ans = false;
        for (int i = 0; i < V; i++) {
            if (isVisited[i] == false) {
                ans = cycleDetection(graph, isVisited, i, rec_stack);
                if (ans) {
                    break;
                }
            }
        }

        System.out.println(ans);
    }
}
