Through BFS:-

class Pair{
    int node;
    int col;
    Pair(int node, int col){
        this.node = node;
        this.col = col;
    }
}

class Solution {
    public boolean bfs(int[][] graph, int[] vis, int s){
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(s, 0));
        vis[s] = -1;
        
        while(!q.isEmpty()){
            Pair curr = q.poll();
            int node = curr.node;
            int col = curr.col;
            for(int i=0; i<graph[node].length; i++){
                int n = graph[node][i];
                if(vis[n]==0){
                    vis[n] = col==1?-1:1;
                    q.add(new Pair(n, vis[n]));
                }
                else if(vis[n]==col){
                    return false;
                }
            }
        }
        return true;  
    }
    public boolean isBipartite(int[][] graph) {
        int vis[] = new int[graph.length];
        for(int i=0; i<graph.length; i++){
            if(graph[i].length != 0 && vis[i]==0){
                if(!bfs(graph, vis, i)){
                    return false;
                }
            }
        }
        return true;
    }
}
