class Solution {
    public int solve(int[] arr, int i, int B, int n, int[][] dp){
        if(i>=n) return 0;

        if(dp[i][B] != -1) return dp[i][B];

        int profit = 0;
        if(B==1){
            profit = Math.max( -arr[i] + solve(arr, i+1, 0, n, dp), solve(arr, i+1, B, n, dp));
        } else{
            profit = Math.max(arr[i] + solve(arr, i+1, 1, n, dp), solve(arr, i+1, B, n, dp));
        }
        return dp[i][B] = profit;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for(int i=0; i<n; i++){
            for(int j=0; j<2; j++){
                dp[i][j] = -1;
            }
        }
        return solve(prices, 0, 1, n, dp);
    }
}
