// Solved through Topological Sorting

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<Integer> adj[] = new ArrayList[numCourses];
        for(int i=0; i<adj.length; i++){
            adj[i] = new ArrayList<Integer>();
        }
        for(int i=0; i<prerequisites.length; i++){
            adj[prerequisites[i][1]].add(prerequisites[i][0]);
        }

        int[] inDegrees = new int[numCourses];
        for(int i=0; i<adj.length; i++){
            for(int j=0; j<adj[i].size(); j++){
                inDegrees[adj[i].get(j)]++;
            }  
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<numCourses; i++){
            if(inDegrees[i]==0) q.add(i);
        }

        int[] ans = new int[numCourses];
        int c = 0;
        while(!q.isEmpty()){
            int curr = q.poll();
            ans[c++] = curr;
            for(int i=0; i<adj[curr].size(); i++){
                int dest = adj[curr].get(i);
                inDegrees[dest]--;
                if(inDegrees[dest]==0) q.add(dest);
            }
        }

        if(c==numCourses) return ans; //means no cycle so ans array has proper order(topologically sorted order).
        return new int[]{};
    }
}
