// Heap 
// Left child of parent in Heap Array:- (2*i)+1
// Right child of parent in Heap Array:- (2*i)+2
// Parent of Child in Heap Array:- (i-1)/2

import java.util.*;

public class Main
{
    static void swap(LinkedList<Integer> heap, int a, int b){
        int temp = heap.get(a);
        heap.set(a, heap.get(b));
        heap.set(b, temp);
    }
    static void push_up_element(LinkedList<Integer> heap, int idx){
        int parent_idx = (idx-1)/2;
        if(idx == 0 || heap.get(parent_idx) < heap.get(idx)) return;
        swap(heap, parent_idx, idx);
        push_up_element(heap, parent_idx);
    }
    static void insert_in_min_heap(LinkedList<Integer> heap, int element){
        heap.add(element);
        int idx = heap.size() - 1;
        push_up_element(heap, idx);
    }
	public static void main(String[] args) {
	    Scanner sc= new Scanner(System.in);
		LinkedList<Integer> heap = new LinkedList<>();
		heap.add(10);
		heap.add(20);
		heap.add(30);
		heap.add(40);
		heap.add(50);
		
		int n = sc.nextInt();
		
		insert_in_min_heap(heap, n);
		System.out.println(heap);
	}
}
