import java.util.*;

public class Main{
    public static class Node{
        int val;
        Node left;
        Node right;
        public Node(int val){
            this.val = val;
        }
    }
    
    static int height(Node root){
        if(root==null || (root.left==null && root.right==null)) return 0;
        return Math.max(height(root.left), height(root.right)) + 1;
    }

    static void nthlevel(Node root, int n){
        if(root==null) return;
        if(n==1){
            System.out.print(root.val + " ");
            return;
        }
        nthlevel(root.left, n-1);
        nthlevel(root.right, n-1);
    }
    
    static void boundaryPrint(Node root){
        LeftBoundary(root);
        leafNodes(root);
        rightBoundary(root.right);
    }
    
    static void LeftBoundary(Node root){
        if(root == null) return;
        if(root.left==null && root.right==null) return;
        System.out.print(root.val+ " ");
        if(root.left!=null) LeftBoundary(root.left);
        else LeftBoundary(root.right);
    }
    
    static void leafNodes(Node root){
        if(root==null) return;
        if(root.left==null && root.right==null){
            System.out.print(root.val + " ");
            return;
        } 
        leafNodes(root.left);
        leafNodes(root.right);
    }
    
    static void rightBoundary(Node root){
        if(root==null)return;
        if(root.left==null && root.right==null) return;
        if(root.right!=null) rightBoundary(root.right);
        else rightBoundary(root.left);
        System.out.print(root.val + " ");
    }
    
	public static void main(String[] args) {
		String[] arr = {"1", "2", "3", "4", "5", "", "6", "7", "", "8", "", "9", "10", "", "11", "", "12", "", "13", "", "14", "15", "16", "", "17", "", "", "18", "", "19", "", "", "", "20", "21", "22", "23", "", "24", "25", "26", "27", "", "", "28", "", ""};
		Node root = new Node(Integer.parseInt(arr[0]));
		
		Queue<Node> q = new LinkedList<>();
		q.add(root);
		
		for(int i=1; i<arr.length-1; i+=2){
		    if(!arr[i].equals("")){
		        Node newNode = new Node(Integer.parseInt(arr[i]));
		        q.peek().left = newNode;
		        q.add(newNode);
		    }
		    if(!arr[i+1].equals("")){
		        Node newNode1 = new Node(Integer.parseInt(arr[i+1]));
		        q.peek().right = newNode1;
		        q.add(newNode1);
		    }
		    q.remove();
		}
		
		int level = height(root) + 1;
		for(int i=1; i<=level; i++){
		    nthlevel(root, i);
		    System.out.println();
		}
		
		System.out.println();

// Boundary Traversal of a Binary Tree.
		boundaryPrint(root);
	}
}
