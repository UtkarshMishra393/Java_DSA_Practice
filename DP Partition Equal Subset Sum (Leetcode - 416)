class Solution {
    public boolean solve(int[] arr, int i, int target, int[][] dp){
        if(target==0) return true;
        if(i==0) return arr[0]==target;

        if(dp[i][target] != -1) return dp[i][target]==1? true:false;

        boolean notTake = solve(arr, i-1, target, dp);
        boolean take = false;
        if(arr[i]<=target){
            take = solve(arr, i-1, target-arr[i], dp);
        }

        boolean ans = take || notTake;

        dp[i][target]= 0;
        if(ans){
            dp[i][target] = 1;
        }

        return ans;
    }
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for(int i=0; i<n; i++){
            sum += nums[i];
        }
        if(sum%2 != 0) return false;
        int[][] dp = new int[n][sum/2+1];
        for(int i=0; i<n; i++){
            Arrays.fill(dp[i], -1);
        }
        return solve(nums, n-1, sum/2, dp);
    }
}
