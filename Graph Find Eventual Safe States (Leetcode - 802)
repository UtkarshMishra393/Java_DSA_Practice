// Through Cycle Detection (Faster)
class Solution {
    public boolean dfs(int[][] graph, boolean[] vis, boolean[] check, boolean[] pathVis, int curr){
        vis[curr] = true;
        pathVis[curr] = true;
        for(int i=0; i<graph[curr].length; i++){
            int node = graph[curr][i];
            if(!vis[node]){
                if(dfs(graph, vis, check, pathVis, node)){
                    check[node] = false;
                    return true;
                }
            }
            else if(pathVis[node]){
                return true;
            }
        }

        check[curr] = true;
        pathVis[curr] = false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int r = graph.length;
        boolean[] vis = new boolean[r];
        boolean[] pathVis = new boolean[r];
        boolean[] check = new boolean[r];

        for(int i=0; i<r; i++){
            if(!vis[i]){
                dfs(graph, vis, check, pathVis, i);
            }
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0; i<r; i++){
            if(check[i]){
                ans.add(i);
            }
        }

        return ans;
    }
}



// Through Topological Sort (Slower)
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int r = graph.length;
        ArrayList<Integer>[] reversedGraph = new ArrayList[r];

        for(int i=0; i<r; i++){
            reversedGraph[i] = new ArrayList<Integer>();
        }

        for(int i=0; i<r; i++){
            for(int j=0; j<graph[i].length; j++){
                reversedGraph[graph[i][j]].add(i);
            }
        }

        int[] inDegree = new int[r];
        for(int i=0; i<r; i++){
            for(int j=0; j<reversedGraph[i].size(); j++){
                inDegree[reversedGraph[i].get(j)]++;
            }
        }

        Stack<Integer> st = new Stack<>();
        ArrayList<Integer> ans = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();

        for(int i=0; i<r; i++){
            if(inDegree[i]==0){
                q.add(i);
                ans.add(i);
            }
        }

        while(!q.isEmpty()){
            int curr = q.poll();
            for(int i=0; i<reversedGraph[curr].size(); i++){
                int node = reversedGraph[curr].get(i);
                inDegree[node]--;
                if(inDegree[node]==0){
                    ans.add(node);
                    q.add(node);
                }
            }
        }

        Collections.sort(ans);
        return ans;
    }
}
