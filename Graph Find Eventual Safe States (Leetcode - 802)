class Solution {
    public boolean dfs(int[][] graph, boolean[] vis, boolean[] check, boolean[] pathVis, int curr){
        vis[curr] = true;
        pathVis[curr] = true;
        for(int i=0; i<graph[curr].length; i++){
            int node = graph[curr][i];
            if(!vis[node]){
                if(dfs(graph, vis, check, pathVis, node)){
                    check[node] = false;
                    return true;
                }
            }
            else if(pathVis[node]){
                return true;
            }
        }

        check[curr] = true;
        pathVis[curr] = false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int r = graph.length;
        boolean[] vis = new boolean[r];
        boolean[] pathVis = new boolean[r];
        boolean[] check = new boolean[r];

        for(int i=0; i<r; i++){
            if(!vis[i]){
                dfs(graph, vis, check, pathVis, i);
            }
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0; i<r; i++){
            if(check[i]){
                ans.add(i);
            }
        }

        return ans;
    }
}
