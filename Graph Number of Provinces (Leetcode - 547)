class Solution {

    public void bfs(ArrayList<Integer>[] adj, int s, boolean[] vis){
        Queue<Integer> q = new LinkedList<>();
        q.add(s);


        while(!q.isEmpty()){
            int curr = q.poll();

            for(int k=0; k<adj[curr].size(); k++){
                int node = adj[curr].get(k);
                if(!vis[node]){
                    vis[node] = true;
                    q.add(node);
                }
            }
        }

    }

    public int findCircleNum(int[][] isConnected) {
        int ans = 0;
        ArrayList<Integer>[] adj = new ArrayList[isConnected.length];
        for(int i=0; i<adj.length; i++){
            adj[i] = new ArrayList<Integer>();
        }

        for(int i=0; i<isConnected.length; i++){
            for(int j=0; j<isConnected[i].length; j++){
                if(i!=j && isConnected[i][j]==1){
                    adj[i].add(j);
                }
            }
        }

        boolean[] vis = new boolean[isConnected.length];
        for(int i=0; i<adj.length; i++){
            if(!vis[i]){
                bfs(adj, i, vis);
                ans++;
            }
        }

        return ans;
    }
}
