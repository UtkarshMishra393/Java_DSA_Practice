class Solution {
    public class Pair{
        int node;
        int dist;
        Pair(int node, int dist){
            this.node = node;
            this.dist = dist;
        }
    }
    // Function to find the shortest path from a source node to all other nodes
    public int[] shortestPath(ArrayList<ArrayList<Integer>> adj, int src) {
        int[] dist = new int[adj.size()];
        for(int i=0; i<adj.size(); i++){
            if(i!=src) dist[i] = -1;
        }
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src, 0));
        
        while(!q.isEmpty()){
            Pair currNode = q.poll();
            int curr = currNode.node;
            int dis = currNode.dist;
            for(int i=0; i<adj.get(curr).size(); i++){
                int node = adj.get(curr).get(i);
                if(dist[node]==-1 || (dist[node] > dis+1)){
                    dist[node] = dis+1;
                    q.add(new Pair(node, dist[node]));
                }
            }
        }
        
        return dist;
    }
}
