// reciursive
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode node = new TreeNode(val);
        if(root==null) return node;
        insert(root, node);
        return root;
    }
    public void insert(TreeNode root, TreeNode node){
        if(root==null) return;
        if(root.left==null && node.val<root.val){
            root.left = node;
            return;
        }
        if(root.right==null && node.val>root.val){
            root.right = node;
            return;
        }
        if(root.val>node.val){
            insert(root.left, node);
        }
        else insert(root.right, node);
    }
}


// Iterative
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode node = new TreeNode(val);
        TreeNode ans = root;
        if(root==null) return node;
        while(root!=null){
            if(root.left==null && root.val>node.val){
                root.left = node;
                break;
            }
            if(root.right==null && root.val<node.val){
                root.right = node;
                break;
            }
            if(root.val>node.val){
                root = root.left;
            }
            else root = root.right;
        }
        return ans;
    }
}
