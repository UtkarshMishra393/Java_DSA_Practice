class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<Integer> adj[] = new ArrayList[n];
        for(int i=0; i<n; i++){
            adj[i] = new ArrayList<Integer>();
        }
        for(int i=0; i<edges.length; i++){
            adj[edges[i][0]].add(edges[i][1]);
            adj[edges[i][1]].add(edges[i][0]);
        }

        boolean[] vis = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        q.add(source);
        vis[source] = true;

        while(!q.isEmpty()){
            int curr = q.poll();
            if(curr == destination){
                return true;
            }
            for(int i=0; i<adj[curr].size(); i++){
                int node = adj[curr].get(i);
                if(!vis[node]){
                    q.add(node);
                    vis[node] = true;
                }
            }
        }
        return false;
    }
}
