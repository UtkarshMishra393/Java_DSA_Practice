class Solution {
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        int[] inDegrees = new int[adj.size()];
        for(int i=0; i<adj.size(); i++){
            for(int j=0; j<adj.get(i).size(); j++){
                inDegrees[adj.get(i).get(j)]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        int c = 0;
        for(int i=0; i<inDegrees.length; i++){
            if(inDegrees[i]==0) q.add(i);
        }
        while(!q.isEmpty()){
            int  curr = q.poll();
            c++;
            for(int i=0; i<adj.get(curr).size(); i++){
                int node = adj.get(curr).get(i);
                inDegrees[node]--;
                if(inDegrees[node]==0){
                    q.add(node);
                }
            }
        }
        if(adj.size()==c) return false;
        return true;
    }
}
