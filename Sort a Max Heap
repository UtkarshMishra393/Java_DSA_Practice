// Heap 
// Left child of parent in Heap Array:- (2*i)+1
// Right child of parent in Heap Array:- (2*i)+2
// Parent of Child in Heap Array:- (i-1)/2

import java.util.*;

public class Main
{
    static void swap(LinkedList<Integer> heap, int a, int b){
        int temp = heap.get(a);
        heap.set(a, heap.get(b));
        heap.set(b, temp);
    }
    static void push_down_element(LinkedList<Integer> heap, int i){
        int left = Integer.MIN_VALUE;
        int right = Integer.MIN_VALUE;
        if( ((2*i)+1) < heap.size()) left = heap.get((2*i)+1);
        if( ((2*i)+2) < heap.size()) right = heap.get((2*i)+2);
        
        if(i==heap.size()-1 || (heap.get(i) > left && heap.get(i) > right)) return;
        
        if(left>right){
            swap(heap, i, (2*i)+1);
            push_down_element(heap, (2*i)+1);
        } 
        else{
            swap(heap, i, (2*i)+2);
            push_down_element(heap, (2*i)+2);
        } 
    }
    static void deleteFromMaxHeap(LinkedList<Integer> heap, LinkedList<Integer> sortedMaxHeap){ // deletion in heap is from first element
        int n = heap.size()-1;
        swap(heap, 0, n);
        sortedMaxHeap.add(heap.remove(n));
        if(heap.size()>1) push_down_element(heap, 0);
    }
	public static void main(String[] args) {
	    Scanner sc= new Scanner(System.in);
		LinkedList<Integer> heap = new LinkedList<>();
		heap.add(50);
		heap.add(30);
		heap.add(40);
		heap.add(20);
		heap.add(10);
        LinkedList<Integer> sortedMaxHeap = new LinkedList<>();
        int n = heap.size();
        for(int i=0; i<n; i++){
            deleteFromMaxHeap(heap, sortedMaxHeap);
            System.out.println(heap);
        }
		System.out.println(sortedMaxHeap);
	}
}
