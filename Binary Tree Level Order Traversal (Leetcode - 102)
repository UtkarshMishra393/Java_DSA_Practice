Recursively:-

class Solution {
    public int height(TreeNode root){
        if(root==null || (root.left==null && root.right==null)) return 0;
        return Math.max(height(root.left), height(root.right)) + 1;
    }

    public void nthlevel(TreeNode root, int n, List<Integer> list){
        if(root==null) return;
        if(n==1){
            list.add(root.val);
            return;
        }
        nthlevel(root.left, n-1, list);
        nthlevel(root.right, n-1, list);
    }

    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        List<List<Integer>> list = new ArrayList<>();
        int level = height(root) + 1;
        for(int i=1; i<=level; i++){
            List<Integer> subList = new ArrayList<>();
            nthlevel(root, i, subList);
            list.add(subList);
        }
        return list;
    }
}


Iteratively:-
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null){
            return ans;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> level = new ArrayList<>();
            int c = queue.size();
            for(int i=0; i<c; i++){
                TreeNode node = queue.poll();
                level.add(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            ans.add(level);
        }
        return ans;
    }
}
