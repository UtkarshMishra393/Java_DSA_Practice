1. Iterative Method (DFS):
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(st.size()>0){
            TreeNode temp = st.peek();
            if(temp.right==null && temp.left==null){
                list.add(temp.val);
                st.pop();
            } else{
                if(temp.right!=null){
                    st.push(temp.right);
                    temp.right=null;
                }
                if(temp.left!=null){
                    st.push(temp.left);
                }   temp.left = null;
            }
        }
        return list;
    }
}


2. Recursive Method:
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list);
        return list;
    }

    public void helper(TreeNode root, List<Integer> list){
        if(root==null){
            return;
        }
        helper(root.left, list);
        helper(root.right, list);
        list.add(root.val);
    }
}
