class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        // List<Integer> ds = new ArrayList<>();
        // boolean[] isValid = new boolean[nums.length];
        helper(nums, 0, ans);
        return ans;
    }

    static void helper(int[] nums, int idx, List<List<Integer>> ans){
        if(idx == nums.length-1){
            List<Integer> list = new ArrayList<>();
            for(int i: nums){
                list.add(i);
            }
            ans.add(list);
            return;
        }

        for(int i=idx; i<nums.length; i++){
            swap(i, idx, nums);

            helper(nums, idx+1, ans);

            // backtracking
            swap(i, idx, nums);
        }
    }

    static void swap(int i, int idx, int[] arr){
        int t = arr[i];
        arr[i] = arr[idx];
        arr[idx] = t;
    }
}
