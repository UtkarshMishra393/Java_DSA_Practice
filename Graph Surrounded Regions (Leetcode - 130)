class Solution {
    public void bfs(char[][] board, int i, int j, boolean[][] vis){
        int r = board.length, c = board[0].length;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{i, j});
        
        vis[i][j] = true;
        int[] row = {-1, 0, 1, 0};
        int[] col = {0, 1, 0, -1};
        
        while(!q.isEmpty()){
            int curr[] = q.poll();
            int x = curr[0], y = curr[1];
            for(int k=0; k<4; k++){
                int nx = x + row[k];
                int ny = y + col[k];
                if(nx>=0 && ny>=0 && nx<r && ny<c && !vis[nx][ny] && board[nx][ny]=='O'){
                    vis[nx][ny] = true;
                    q.add(new int[]{nx, ny});
                }
            }
        }
    }
    public void solve(char[][] board) {
        int r = board.length, c = board[0].length;
        boolean[][] vis = new boolean[r][c];
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(i!=0 && i!=r-1 && j>0 && j<c-1) continue;
                if(board[i][j] == 'O' && !vis[i][j]){
                    bfs(board, i, j, vis);
                }
            }
        }
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(board[i][j] == 'O' && !vis[i][j]){
                    board[i][j] = 'X';
                }
            }
        }
    }
}
