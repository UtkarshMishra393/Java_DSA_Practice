// Using Memoization
class Solution {
    public int solve(int[][] grid, int i, int j, int[][] dp){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return (int)1e9;

        if(dp[i][j]!=-1) return dp[i][j];

        int up = solve(grid, i-1, j, dp) + grid[i][j];
        int left = solve(grid, i, j-1, dp) + grid[i][j];

        return dp[i][j] = Math.min(up, left);
    }
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        for(int i=0; i<dp.length; i++){
            for(int j=0; j<dp[0].length; j++){
                dp[i][j] = -1;
            }
        }
        return solve(grid, grid.length-1, grid[0].length-1, dp);
    }
}
