class Solution {
    public void dfs(int[][] grid, boolean[][] vis, int i, int j, int[] row, int[] col){
        vis[i][j] = true;
        for(int k=0; k<4; k++){
            int ni = i+row[k];
            int nj = j+col[k];
            if(ni>=0 && nj>=0 && ni<grid.length && nj<grid[0].length && !vis[ni][nj] && grid[ni][nj] == 1){
                dfs(grid, vis, ni, nj, row, col);
            } 
        }
    }
    public int numEnclaves(int[][] grid) {
        int r = grid.length, c = grid[0].length;
        boolean vis[][] = new boolean[r][c];
        int[] row = {-1, 0, 1, 0};
        int[] col = {0, 1, 0, -1};
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(i!=0 && i!=r-1 && j>0 && j<c-1) continue;
                if(grid[i][j]==1 && !vis[i][j]){
                    dfs(grid, vis, i, j, row, col);
                }
            }
        }

        int ans = 0;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    ans++;
                }
            }
        }
        return ans;
    }
}
