// Normal Fibonacci through Recursion
public class DPStriver {
    static int f(int n) {
        if (n <= 1) {
            return n;
        }
        return f(n - 1) + f(n - 2);
    }

    public static void main(String[] args) {
        int = 7;
        System.out.println(f(n));
    }
}


// Fibonacci through DP array using Memoization (TC = O(n), SC = O(n) + O(n), time and space complexity reduced)
public class DPStriver {
    static int f(int n, int[] dp) {
        if (n <= 1) {
            return n;
        }
        if (dp[n] != -1) {
            return dp[n];
        }
        return dp[n] = f(n - 1, dp) + f(n - 2, dp);
    }

    public static void main(String[] args) {
        int n = 6;
        int[] dp = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i] = -1;
        }
        System.out.println(f(n, dp));
    }
}


// Fibonacci using Tabulation method (Space Complexity Reduced, SC = O(n))
public class DPStriver {
    public static void main(String[] args) {
        int n = 6;
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        System.out.println(dp[n]);
    }
}


// Fabonacci using Tabulation Method (Space Complexity Reduced, SC = O(1))
public class DPStriver {
    public static void main(String[] args) {
        int n = 7;
        int[] dp = new int[n + 1];
        int prev2 = 0;
        int prev = 1;
        for (int i = 2; i <= n; i++) {
            int curr = prev + prev2;
            prev2 = prev;
            prev = curr;
        }
        System.out.println(prev);
    }
}






