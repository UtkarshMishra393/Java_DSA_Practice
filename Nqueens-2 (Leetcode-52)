class Solution {
    public int totalNQueens(int n) {
        char[][] board = new char[n][n];
	    for(int i=0; i<n; i++){
	        for(int j=0; j<n; j++){
	            board[i][j] = '.';
	        }
	    }
        int[] arr = new int[1];
	    nqueens(board, 0, arr);
        return arr[0];
    }

    static void nqueens(char[][] board, int row, int[] count){
	    int n = board.length;
	    if(row == n){
            count[0]++;
	        return;
	    }
	    for(int col=0; col<n; col++){
	        if(isSafe(board, row, col)){
	            board[row][col] = 'Q';
	            nqueens(board, row+1, count);
	            board[row][col] = '.';
	        }
	    }
	}
	
	static boolean isSafe(char[][] board, int row, int col){
	    int n = board.length;
	    
	    // check row
	    for(int i=0; i<n; i++){
	        if(board[row][i] == 'Q'){
	            return false;
	        } 
	    }
	    
	    
	    //check col
	    for(int i=0; i<n; i++){
	        if(board[i][col] == 'Q'){
	            return false;
	        } 
	    }
	    
	    //check NE
	    int i = row;
	    int j = col;
	    while(i>=0 && j<n){
	        if(board[i][j] == 'Q'){
	            return false;
	        }
	        i--;
	        j++;
	    }
	    
	    //check SE
	    i = row;
	    j = col;
	    while(i<n && j<n){
	        if(board[i][j] == 'Q'){
	            return false;
	        } 
	        i++;
	        j++;
	    }
	    
	    
	    //check SW
	    i = row;
	    j = col;
	    while(i<n && j>=0){
	        if(board[i][j] == 'Q'){
	            return false;
	        } 
	        i++;
	        j--;
	    }
	  
	    //check NW
	    i = row;
	    j = col;
	    while(i>=0 && j>=0){
	        if(board[i][j] == 'Q'){
	            return false;
	        } 
	        i--;
	        j--;
	    }
	    
	    return true;
	}
}
