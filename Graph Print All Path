Time Complexity :- O(V^V)

import java.util.*;

public class GraphDSA {
    public static class Edge {
        int src;
        int dest;
        int wt;

        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 3));
        graph[1].add(new Edge(1, 0));

        graph[2].add(new Edge(2, 4));
        graph[2].add(new Edge(2, 0));

        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 4));
        graph[3].add(new Edge(3, 5));

        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));

        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[5].add(new Edge(5, 6));

        graph[6].add(new Edge(6, 5));

    }

    static void printAllPath(ArrayList<Edge> graph[], boolean[] isVisited, int node, String path, int tar) {
        if (node == tar) {
            System.out.println(path);
            return;
        }

        for (int i = 0; i < graph[node].size(); i++) {
            Edge e = graph[node].get(i);
            if (isVisited[e.dest] == false) {
                isVisited[node] = true;
                printAllPath(graph, isVisited, e.dest, path + e.dest, tar);
                isVisited[node] = false;
            }
        }
    }

    public static void main(String[] args) {
        int V = 7;

        ArrayList<Edge> graph[] = new ArrayList[V];
        createGraph(graph);

        boolean[] isVisited = new boolean[V];

        int src = 0, tar = 5;

        printAllPath(graph, isVisited, src, "0", tar);
    }
}
