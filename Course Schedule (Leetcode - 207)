class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] inDegrees = new int[numCourses];
        for(int i=0; i<prerequisites.length; i++){
            inDegrees[prerequisites[i][0]]++;
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<numCourses; i++){
            if(inDegrees[i]==0) q.add(i);
        }

        int c = 0;
        while(!q.isEmpty()){
            int curr = q.poll();
            c++;
            for(int i=0; i<prerequisites.length; i++){
                if(prerequisites[i][1]==curr){
                    int dest = prerequisites[i][0];
                    inDegrees[dest]--;
                    if(inDegrees[dest]==0) q.add(dest);
                }
            }
        }

        if(c==numCourses) return true; //means no cycle so finishing all courses is posiible.
        return false;
    }
}


