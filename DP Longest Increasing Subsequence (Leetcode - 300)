// Through DP Memoization 
class Solution {
    public int solve(int[] nums, int i, int prev, int[][] dp){
        if(i<0) return 0;

        if(dp[i][prev+1] != -1) return dp[i][prev+1];

        int take = 0;
        if(prev == -1 || nums[i]<nums[prev]){
            take = 1 + solve(nums, i-1, i, dp);
        }
        int notTake = solve(nums, i-1, prev, dp);

        return  dp[i][prev+1] = Math.max(take, notTake);
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n+1];
        for(int i=0; i<n; i++){
            for(int j=0; j<=n; j++){
                dp[i][j] = -1;
            }
        }
        return solve(nums, n-1, -1, dp);
    }
}

// Through Taulation
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n+1][n+1];
        for(int i=n-1; i>=0; i--){
            for(int j=i-1; j >= -1; j--){
                int len = dp[i+1][j+1];
                if(j == -1 || nums[i] > nums[j]){
                    len = Math.max(len, 1 + dp[i+1][i+1]);
                }

                dp[i][j+1] = len; 
            }
        }
        return dp[0][0];
    }
}

//Through Space Optiumization
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] prev = new int[n+1];
        int[] curr = new int[n+1];

        for(int i=n-1; i>=0; i--){
            for(int j=i-1; j >= -1; j--){
                int len = prev[j+1];
                if(j == -1 || nums[i] > nums[j]){
                    len = Math.max(len, 1 + prev[i+1]);
                }
                curr[j+1] = len; 
            }
            prev = curr;
        }
        return curr[0];
    }
}

// Through Binary Search (Faster Approach)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        List<Integer> arr = new ArrayList<>();
        arr.add(nums[0]);
        for(int i=1; i<n; i++){
            if(nums[i] > arr.get(arr.size()-1)){
                arr.add(nums[i]);
            }
            else{
                int s = 0;
                int e = arr.size()-1;
                while(s<e){
                    int mid = s + (e-s)/2;
                    if(nums[i] > arr.get(mid)){
                        s = mid+1;
                    }
                    else{
                        e = mid;
                    }
                }
                arr.set(e, nums[i]);
            }
        }
        return arr.size();
    }
}
