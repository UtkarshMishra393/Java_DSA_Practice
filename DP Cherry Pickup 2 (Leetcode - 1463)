class Solution {
    public int solve(int[][] arr, int i, int j, int k, int n, int m, int[][][] dp){
        if(i==n) return 0;
        if(j<0 || j>=m || k<0 || k>=m) return 0;

        if(dp[i][j][k] != -1) return dp[i][j][k];

        int max = (int)-1e8;
        for(int x=-1; x<=1; x++){
            int nj = j + x;
            for(int y=-1; y<=1; y++){
                int nk = k + y;
                int value = 0;
                if(j == k){
                    value = arr[i][j];
                } else{
                    value = arr[i][j] + arr[i][k];
                }
                value += solve(arr, i+1, nj, nk, n, m, dp);
                max = Math.max(max, value);
            }
        }

        return dp[i][j][k] = max;
    }
    public int cherryPickup(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][][] dp = new int[n][m][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                Arrays.fill(dp[i][j], -1);
            }
        }
        return solve(grid, 0, 0, m-1, n, m, dp);
    }
}
