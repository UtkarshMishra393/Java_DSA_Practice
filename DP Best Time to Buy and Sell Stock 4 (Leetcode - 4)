class Solution {
    public int solve(int[] prices, int n, int i, int Buy, int capacity, int[][][] dp){
        if(capacity==0) return 0;
        if(i>=n) return 0;

        if(dp[i][Buy][capacity] != -1) return dp[i][Buy][capacity];

        int profit = 0;
        if(Buy==1){
            profit = Math.max(-prices[i] + solve(prices, n, i+1, 0, capacity, dp), solve(prices, n, i+1, Buy, capacity, dp));
        } else{
            profit = Math.max(prices[i] + solve(prices, n, i+1, 1, capacity-1, dp), solve(prices, n, i+1, Buy, capacity, dp));
        }
        return dp[i][Buy][capacity] = profit;
    }
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n][2][k+1]; //taking k+1 because 0 will also be considered, sop for 2, it will 2, 1, 0.
        for(int i=0; i<n; i++){
            for(int j=0; j<2; j++){
                for(int m=0; m<k+1; m++){
                    dp[i][j][m] = -1;
                }
            }
        }
        return solve(prices, n, 0, 1, k, dp);
    }
}
